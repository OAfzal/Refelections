What happens when you initialize a repository? Why do you need to do it?

when you initilase a repo a .git file is created which i think is the metadata and stores the history of the repository. It contains no commit and gives the user the right to select the files to track in the repo.


How is the staging area different from the working directory and the repository?
What value do you think it offers?

The staging area is where we can prepare the files we want to add to the commit. It allows us to stage the files which needed to be committed.

How can you use the staging area to make sure you have one commit per logical
change?

We can add the changes we made to the staging area where we can then decide weather to commit the change to the repo or not.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When one wants to add  a new feature but doesnt want to end up and messing up with the master branch he can make the changes in the new branch and then it can be later merged with the new code.

How do the diagrams help you visualize the branch structure?

It gives a better way of tracking the parent.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches helped in adding two features at the same time. We represent it in the diagram because it helps us in having a better understanding of identifying the parents of the branches.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

Git allows the user to edit the code when a conflict occurs and that is a good option that it doesnt choose to resolve the conflicts itself and lets the user 
do the job.